*aa.txt*        Plugin for managing time and note taking        version 0.01b

==============================================================================
CONTENTS                                                            *aa-index*

    1. Intro                                    |aa-intro|       
        1.2. AA (Algorithmic Autoregulation)    |AA|
             |aa-shout|, |aa-literature|, |aa-shout-usage|, |aa-session|,
             |aa-slot|, |aa-repr|,  |aa-plugin|
        1.2. Related plugins                    |aa-related-plugins|
        1.3. Usage examples                     |aa-usage-examples|
        1.3. |aa| help                            |aa-helphelp|
             |aa-cheatsheet|, |aa-help-cheatsheet|
    2. Install                                  |aa-install|
             |aa-install-recommended|, |aa-install-Vimball|, |aa-install-root|
    3. Options, variables and general settings  |aa-settings| |aa-options|
    3. Mappings                                 |aa-mappings|
                                                |aa-shout-mappings|
                                                |aa-session-mappings|
                                                |aa-hack-mappings|
                                                |aa-general-mappings|
    4. Commands                                 |aa-commands|
                                                |aa-main-commands|
                                                |aa-util-commands|
    5. Functions                                |aa-functions|
    6. Files                                    |aa-files|
        6.1. Syntax highlighting in |aa|          |aa-syntax|
        6.2. aux/aashouts.txt                   |aashouts.txt|
        6.2. aux/aasessions.txt                 |aasessions.txt|
        6.1. plugin/aa.vim                      |aa.vim|
        6.2. syntax/aashouts.vim                |aashouts.vim|
        6.2. ftdetect/aafts.vim                 |aaftdetect.vim|
        6.2. after/plugin/aastartup.vim         |aastartup.vim|
        6.2. doc/aa.txt                         |aa.txt|
             |aa-help|
    7. Final words                              |aa-final-words|
        7.1. Advantages and drawbacks of |aa|     |aa-compare|
        7.1. Further work                       |aa-todo|
        7.1. Acknowledgements                   |aa-Ack|
        7.2. Contact                            |aa-Contact|
                                                
    

==============================================================================
1. Intro                                                       *aa-intro*
This plugin enables the AA a personal time-tracking and note-taking mechanism
inside Vim.

AA as been useful for personal and collective work-forces, in both professional
and voluntary dedication, employing either formal and informal logging of
shouts, for scientific research and for software development.  This plugin
holds considerable advantages over the preceding implementations, although the
sharing interface is not still implemented.  See |aa-AA|

It might be maximally harnessed by using other advanced self-management
facilities, such as Vimwiki. See |aa-related-plugins|

------------------------------------------------------------------------------
1.1.                                                            *AA*
                                                                *aa-shout*

The main idea of AA is sending messages, which are notes about ongoing work
(but not strictly) for managing personal or group dedication, sharing ongoing
processes, automated documentation of efforts, self-transparency, and other
resounding goals. Such messages are herein called shouts.
This method (or strategy) has proved itself valuable though time,
specially in fine-tuning efforts and tackling complex tasks. [1][2][3][4]
One might also want to loot at the Pomodoro Technique for time management.

                                                                *aa-literature*
[1]: Fabbri, R. (2017). The Algorithmic-Autoregulation (AA) Methodology and
Software: a collective focus on self-transparency.
arXiv preprint https://arxiv.org/abs/1711.04612
[2]: Fabbri, R., Fabbri, R., Vieira, V., Negrao, A., Zambianchi, L., Mendon√ßa,
M., ... & Shiga, D. (2013). AA: The Algorithmic Autoregulation
(Distributed Software Development) Methodology.
arXiv preprint https://arxiv.org/abs/1604.08255
[3]: https://github.com/ttm/aa01
[4]: http://wiki.nosdigitais.teia.org.br/Lab_Macambira

                                                                *aa-shout-usage*
The use of shouts is by no means strict. As AA is meant for the user to harness
its mechanisms, one should continually adapt its use to fit personal needs and
desires.  Propaganda are considered useless, a deviation from the purposes of
AA, and are most often in shouts from new users.  Notes about ongoing tasks are
preferred against those exhibiting finished products, although finishing
something is often the most appropriate shout.  See |aa-usage-examples|

                                                                *aa-session*
These might or not be grouped into sessions, which are sets of consecutive (and
usually also somewhat periodic) shouts.  Sessions are often dedicated to some
ongoing project or task, might be de recipient of other media, such as a video
screenscast or a final message, and metadata, such as rating by other AA users.

                                                                *aa-slot*
Most traditionally, a session is comprised of 8 slots of 15 minutes.  One
should send a shout at the beginning of the session and after each slot is
finished.  Sometimes a tolerance of +- 5 minutes is used as a reference, but it
is all up to the user, of course.
Slot duration range from about a minute to hours.

                                                                *aa-repr*
AA shouts and sessions have traditionally been represented as texts, with e.g.
videos and blogs being uploaded in any third-party online platform, and then
the URLs used as convenient.

                                                                *aa-plugin*
|aa| is a plugin for using AA inside Vim.  With |aa| you can:
    - Write a shout at any time, with convenient mappings and commands.
      See |aa-shout-mappings| |aa-commands|
    - Keep track of your shouts, editing and inputing them though automated
      routines or editing |aashouts.txt| directly as a normal file in Vim.
    - Make AA sessions, with visual and audio cues for: slots finished,
    - Have a clear understanding of AA state (shouts, sessions, paths,
      initialization, variables) with a convenient mapping. See |aaleader-Ai|
    - Hack a very friendly interface of functions, commands and mappings.
      See |aa.vim|
    - Share your shouts and sessions with other AA users through linked data
      protocols (RDF, SparQL, OWL, etc). Not Implemented. See |aa-todo|

------------------------------------------------------------------------------
1.2. Related plugins                                    *aa-related-plugins*

|aa| is being developed as part of the PRV (Python, RDF and VIM) framework.
One might benefit from the other PRV plugins:
    - prv is a set of utilities that I used in a disordered manner beforehand: save and load sessions, mappings, functions, syntax highlighting, etc..
    - realcolors is a set of utilities for tweaking and creating 24 bit true color
      color schemes for Vim.
      The color schemes, default color sets, ways to navigate the color space,
      and more are obtained through techniques derived from psychophysics,
      data visualization, and simple mathematics.
    - tokipona is a set of utilities for the Toki Pona minimalist conlang: syntax highlighting, vocabulary mining, text synthesis, and preliminary Toki Pona wordnets.

Other plugins are envisioned in PRV, partly mentioned in the documenation:
    https://github.com/ttm/prv

Vimwiki has been very symbiotic with my |aa| usage.
See the |aa-bare-vim-wiki| intended.

Please suggest me other plugins.

------------------------------------------------------------------------------
1.3. Usage examples                                    *aa-usage-examples*

As |AA| is a very open methodology, there are coutless ways to use AA.
The core ideas are given in |aa-intro|. This section presents some
procedures which might be followed while using |aa|.

In writing some documents (say scripts and latex files), one has many ideas
about possible enhancements and recognizes potential bugs. These notes
might be taken without leaving the window by using |aaleader-a|.
More ellaborate notes might be taken using |aaleader-A| at any time,
editing directly into shouts.txt. To access the notes, one might
use |aaleader-v|, |aaleader-t| and |aaleader-e|.

A researcher and developer with many tasks relating to diverse subjects is
trying to better keep track of the ideas and issues that spark all the time,
while having focus on the intended tasks for relevant periods of time.
He adopts the standards AA session of 2h: 8 slots of 15 minutes each.
Such sessions (and variations) are conveniently started wih |aaleader-s| and
|aaleader-S|, and |aa-leader-localleader-S|, while |aaleader-l|, |aa-leader-L|,
and |aaleader-O| assists sessions by providing the selected info of: time
left in slot, time since slot started, session on.

A newbie starts using |aa|. First she starts to test the mappings
and write shouts with notes about how to use |aa|. Next, she writes
new mappings, and starts hacking |aa| functions in order to achieve
desired functionalities. Eager to use shouts with appropriate tagging
mechanisms, she uses `:lv` to browse though tags created on the fly.
Finally, the enhancements are sent for evaluation to the main |aa| repository
as a pull request or a Git patch.

------------------------------------------------------------------------------
1.4. |aa| help                                    *aa-helphelp*

Reload this help file (:e<CR> or :e %) to edit it, as specified in the final
line of this aa.txt file.
Render the |aa| help tags e.g. with 

    :helptags %
    (Press TAB and then Backspace the aa.txt)

Please enhance this documentation within this or another file e.g. by 
copying ./aa.txt to ./anything.txt as a template.

                                                        *aa-help-cheatsheet*
Standard Highlighting and functions:
    *Tag*
    |hyperlink|
    'option'
    `:command` >
    function SomeFunc()
        echo "Yes, I am verbatim"
    endf
<    |AFunction()|
    {braces} CTRL-X <Left>
    Column heading~
    Note Notes

More details in $VIMRUNTIME/syntax/help.vim,
and in browsing other help files.

These require tabs (use :se list! to see them):
	*Todo	something to do
	*Error	something wrong
        *Todo   make a syntax rule to always color the line when starting
                with ^\s{x,y}*\U.
                If possible, color the line according to a calculation
                leading the *<token> to RGB space.
    
Mannerisms and default usability: 
    `:se ft=`              to see the chars being used in any help file
    `:se ft=help`         set syntax again
    copy aa.txt or any other help file as a template
    You might follow any tag with <C-]>.
    You see every incidence of a tag in current file with 
                `:lv /|tag< remove me>|/ %`
                (% might be replaced to any path according to {file})
                Similarly:
                `:lh |tag< remove me>|`
                and then `:lop` to navigate the lines where they occur
                (also, :vim and :helpg with :copen
    Type `:h aa-` and press <C-D> to see all the matches.
    You reach a list of all |aa| tags with `:ts` ./aa
    or with `:h aa-index`
    If you load aa.txt not using a help-related command, the tags available
    will only be related to aa.vim, and browsing documentation with external
    tags become broken.

The documentation does not leave much more information about conventions
on help files. Check $VIMRUNTIME/syntax/help.vim for more details.

                                                        *aa-cheatsheet*
Just look into |aa-mappings| and |aa-options|.


mk different sets of tags to be searched for by creating different
tag files, which are loaded when one type of tag is present.


==============================================================================
2. Install                                                  *aa-install*

There are various ways to install Vim plugins.
If you have not picked your preffered way,
this section summarizes what I understand about the issue.

In Vim manual (e.g. see |usr_toc|), a Vim plugin is described as a single file,
which is sourced at startup right after vimrc according to `:h` 'rtp'

The way I find most clean and simple is to copy the whole |aa| file tree
to any pack/*/opt/ directory in your 'runtimepath', such as
.vim/pack/prv/opt/.
This might be done for any plugin, with care for eventual after/ directories,
as described in |prv-after|

Then put:
    `packadd aa`
in yout vimrc.

These are added to the base directories (stored in 'runtimepath')
where Vim looks for standard directories and files.
If you have problems, close and open Vim again.

Also, this same installation is performed with Vimball:

You might also just clone all PRV repository:
    $ git clone https://github.com/ttm/prv ~/.vim/   

and use aa with all |prv| facilities.
You might want to substitute vimrc, filetype.vim, script.vim,
and other template files with your own.

==============================================================================
2. Options, variables and general settings                       *aa-options*
                                                                 *aa-settings* 
Most importantly, when starting a session, you set the duration of the slot
and the number of slots. See |aa-session-mappings|
                                                                *aa-leaders*
                                                                *aa_leader*
                                                                *aa_localleader*
The leader and localleader might be set to any key sequence, it might be
the same as your default leader and localleader, but need not to be.
This is achieved using |prv| (see |prv-leaders| to know how this is achieved),
with a mechanism used in other plugins. To set your leader and localleader
to X and Y, only for |aa|, put this line in your vimrc:
    `let g:prvset = {'leaders' : {'aa': [X, Y]}}`
                                                           *aa-session-cues*
                                                           *aa-color-columns*
                                                           *aa-speech* 
As a way to better support |AA| sessions, |aa| uses both visual cues (color 
columns) and sonic cues (some info is embeded in the synthesized speech).
Speech might be turned off by setting g:aa.say=0 and g:aa.saytime=0.

All these settings are in the |AAInitVars| function in |aa.vim|, with other
directives that might be used to set |aa| according to the next paragraph.


                                                           *aa-hack-settings*
|aa| is seatable in many ways because it deals with writting notes in a few
files:
- One might set different files from |aashouts.txt| and |aasessions.txt|
- Or a different directory that aux/ inside |aa| tree.
- Set and tweak mappings for shouts, sessions, hacks, general use.
- Tweak the commands and functions or write new ones.
- Change the spoken sentences or the color column as the visual cue.
- Add features that fit the use intended.

These might all be set in |aa.vim|

==============================================================================
3. Mappings                                                    *aa-mappings*

                                                          *aa-shout-mappings*
*aa-leader-a*
*aa-leader-A*
*aa-leader-e*
*aa-leader-v*
*aa-leader-t*

                                                          *aa-session-mappings*
*aa-leader-s*
*aa-leader-S*
*aa-leader-localleader-S*
*aa-leader-V*
*aa-leader-l*
*aa-leader-d*
*aa-leader-o*
*aa-leader-localleader-r*
*aa-leader-localleader-R*

                                                          *aa-hack-mappings*
*aa-leader-h*
*aa-leader-H*
*aa-leader-m*
*aa-leader-localleader-h*
*aa-leader-localleader-H*

                                                          *aa-general-mappings*
*aa-leader-c*
*aa-leader-C*
*aa-leader-i*
*aa-leader-I*
*aa-leader-r*

==============================================================================
3. Commands                                                    *aa-commands*

                                                        *aa-main-commands*
    *:A* {shout}
Registers all the line that follows `:A` into shouts.txt

    *:S* {dur} {nslots}
Starts a session with {dur} minutes in each of the {nslots} slots.

    *:Ac* : clears |aa| state. 
    *:Ai* : returns info on |aa| (shouts, sessions, times, etc)
    *:AI* : initializes |aa|

                                                         *aa-util-commands*
    *:Ar* : registers that a shout has been given.
    *:AR* : registers that a shout is wanted.
    *:At* : echoes the time left in current slot.
    *:AT* : echoes the time spent in current slot.
    *:As* : echoes a message with the time since last shout.
    *:Ao* : echoes a message stating if there is an ongoing session.

==============================================================================
3. Functions     *aa-functions*

See the source (|aa.vim|) for all the functions. |aa| is all built on
functions, with the exception of a few mappings which implement some funcitonalities directly.
The commands are used to organize the functionalities yield by the functions,
and are thus used by the mappings.
Functions are organized in main (receive shout, start session, init and info),
utils (check if |aa| is initialized, if session is on,
register that a shout has beed given,
time left and spent in a slot, time since last shout, clear),
aux (routines used by main and utils).

==============================================================================
3. Files     *aa-files*

    Syntax highlighting in |aa|    
    aux/aashouts.txt               
    aux/aasessions.txt             
    plugin/aa.vim                  
    syntax/aashouts.vim            
    ftdetect/aafts.vim             
    after/plugin/aastartup.vim     
    doc/aa.txt                     
    |aa-help|




















==============================================================================
3. Final words     *aa-functions*

------------------------------------------------------------------------------
1.4. advantages and drawbacks of |aa|                               *aa-compare*

------------------------------------------------------------------------------
1.4. Further work                                    *aa-helphelp*

------------------------------------------------------------------------------
1.4. Acknowledgements                                    *aa-helphelp*

------------------------------------------------------------------------------
1.4. Contact                                    *aa-helphelp*


===============
            *aa-design*
AA is designed to be as simple to use and hack
(as I can make it ok, but other people have contributed
to AA[1][2]).

*aa-activism*
|AA| has been envisioned and used for social transformation.
Examples:
* |AA| is recurrently understood as a way to comprovar dedication,
  thus opening a possibility for one to requerer the bounty that fits
  the time spent on a collective wealfare (goals, ethic principles, etc).
  This has happened both in relation to the government (one might ask
  for resources in a public institution), and in relation to the academy
  (one might ask for 


                                                      *aa-disclaimer*
AA is the ambiguous acronym.

Public domain technology
(conceptualization, code, documents, etc)

Run this command-line command in your command-line prompt:
  :cal timer_start(300, 'CrazyFu', {'repeat': 10}) | :exe "fu! CrazyFu(timer) \n exec 'hi Normal guibg=#'.(system(\"echo $RANDOM$RANDOM\")[:5]) \n endf"
See |aa-related-plugins|

  ) ( /\/\/\/\/\ _o_o_ oOo _o_o_ /\/\/\/\/\ ) (

    
            *aa-mappings*
<Space>a
        write a one-line shout
<Space>A
        write an arbitrary shout in your shouts file
<Space>s
  start an AA session :S X Y with Y slots of X minutes

            *aa-commands*
*:A* {shout}
        Add a shout

*:S* {dur} {nslots}
        Start a session.
        {dur} is the duration of a slot in minutes.
        {nslots} is the number of slots in the session.

The funcionality of the AA plugin is centered around these
two commands.
The idea is to send one shout each slot, as a way to keep
a record of the dedication.
More shouts are often useful as notes and enhanced records.

------------------------------------------------------------------------------
1.3. Todo                                                     *aa-todo*

* Tags should not collide. How to find out all the tags defined by the system?
* Routines to send shouts to cloud (SQl, MondDB or RDF preferably)
* arrumar doc
* fazer o resto dos comandos e mapeamentos
* soltar no github talvez vim.org
* ver no doxigen com fazem com vimL
* usar o enter para criar direto o caminho.
* talvez espaco-enter para decorar (link, tag, ref-tag, ref-option ref-command ref-func)
* relacionar bem com a ideia de reactwiki (hypertexto com codigos executaveis)
* iniciar sessao abre duas linhas em branco
* make espeak async!!! >.<
* implement optional margin around slot endings to receive a shout.
* enable the use of parallel sessions (e.g. for different duration slots)
* implement publishing routines for the shouts (and sessions).
    - data should be sent to Data.Wold, DataHub, os similar and made available in RDF/linked data
    - internally, the date line yields a reasonable ID for a shout or session (maybe remove spaces).
      For sharing, the id shoud be: user-datestring.
    - let a user share any number of info in a dedicated file, parsing it to rdf.
* make a cool window with aa info with syntax highlighting
* make declare shout sent/request with or without influecing in the slots related to each slot.
* use :later and :earlier to compare a current file with that of the beginning of a session or lest x sessions or at last x shouts.
  maybe keep the localtime() string in the time string ?
  find a way to have undos specific to a line (and range if possible)

                                                   *aa-bare-vim-wiki*
I have been thinking about maintaining a wiki on bare Vim because it is very
simple and functional:
    - use a directory as wiki root, 
    - put a suffix *.mwiki in the ....
    - use gf to follow pages
    - write token or word with starting / or . if internal link intended
    - reuse Vim's capabilities with help files and (parallel help files?) with
      tags and searching (and what more?).
    - integrate with |aa| and the rest of PRV. See |aa-related-plugins|
    - manage to link paths of wiki pages and of repository trees.  E.g. .py
      files use a specific &path, .vim files, other &path etc...
    - it might be condensed in just a couple of settings with optional advanced
      functions
    - it should be very friendly to making collage of files to render, e.g. a
      latex or HTML file.


                                                 *aa-license*
Copyright: Public Domain.

 vim:modifiable:noreadonly:tw=0:ts=8:ft=help:suffixesadd+=.txt:norl:softtabstop=4:shiftwidth=4:textwidth=0:expandtab:
